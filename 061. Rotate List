#Solution1:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if head == None or k == 0:
            return head
        cur = head
        size = 1
        while cur.next:
            size += 1
            cur = cur.next
        tail = cur
        k = k%size
        p = self.findkth(head,k)
        tail.next = head
        head = p.next
        p.next = None
        return head
    def findkth(self, head, k):
        dummy = ListNode(-1)
        dummy.next = head
        p = dummy
        q = dummy
        
        for i in range(k):
            q = q.next
        while q.next:
            p = p.next
            q = q.next
        return p
#Solution2:(Better)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if not head:
            return None
    
        if head.next == None:
            return head
        
        pointer = head
        length = 1
    
        while pointer.next:
            pointer = pointer.next
            length += 1
    
        rotateTimes = k%length
    
        if k == 0 or rotateTimes == 0:
            return head
    
        fastPointer = head
        slowPointer = head
    
        for a in range (rotateTimes):
            fastPointer = fastPointer.next
    
    
        while fastPointer.next:
            slowPointer = slowPointer.next
            fastPointer = fastPointer.next
    
        temp = slowPointer.next
    
        slowPointer.next = None
        fastPointer.next = head
        head = temp
    
        return head
#Solution3:(Best)
class Solution:
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        slow = fast = dummy = ListNode(-1)
        dummy.next = head
        count = 0 
        if not head:
            return None
        if head.next == None:
            return head
        pointer = head
        length = 1
    
        while pointer.next:
            pointer = pointer.next
            length += 1
    
        rotateTimes = k%length
        if rotateTimes == 0:
            return head
        while fast.next:
            if count<rotateTimes:
                count+=1
                fast = fast.next
            else:
                fast = fast.next
                slow = slow.next
        dummy.next = slow.next
        fast.next = head
        slow.next = None
        return dummy.next 
