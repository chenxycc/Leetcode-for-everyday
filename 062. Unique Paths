#Solution1:
class Solution:
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        if m < 1 or n < 1:
            return 0
        dp = [[1] * n for i in range(m)]
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[-1][-1]
#Solution2:
class Solution:
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        if m < 1 or n < 1:
            return 0
        dp = [1] * n
        for i in range(1, m):
              for j in range(1, n):
                    dp[j] += dp[j-1]
        return dp[n-1]
#Solution3:(转换为排列组合问题）
class Solution:
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        def factorial(num):
            res = 1
            for i in range(1, num + 1):
                res *= i
            return res
        return factorial(m+n-2)//factorial(n-1)//factorial(m-1)
